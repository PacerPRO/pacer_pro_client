{
  "swagger" : "2.0",
  "info" : {
    "description" : "PacerPro API documentation.",
    "version" : "0.5.0",
    "title" : "PacerPro",
    "contact" : {
      "email" : "ken@pacerpro.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "sdx94nst9f.execute-api.us-east-1.amazonaws.com",
  "basePath" : "/qa",
  "schemes" : [ "https" ],
  "paths" : {
    "/cases" : {
      "get" : {
        "tags" : [ "Cases" ],
        "summary" : "A collection of cases.",
        "description" : "Get all cases related to your account.",
        "operationId" : "casesGetCollection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number of objects returned per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Case"
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "4\\d{2}" : {
              "statusCode" : "400"
            }
          },
          "requestParameters" : {
            "integration.request.header.Authorization" : "method.request.header.Authorization",
            "integration.request.querystring.page" : "method.request.querystring.page",
            "integration.request.querystring.limit" : "method.request.querystring.limit"
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/cases",
          "passThroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/cases/{caseId}" : {
      "get" : {
        "tags" : [ "Cases" ],
        "summary" : "A single case.",
        "description" : "Get a single case, specified by `caseId` in the path.",
        "operationId" : "casesGetOne",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "The database identifier of the case.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Case"
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/cases/{caseId}",
          "requestParameters" : {
            "integration.request.path.caseId" : "method.request.path.caseId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/cases/{caseId}/docket_entries" : {
      "get" : {
        "tags" : [ "Cases" ],
        "summary" : "A table of docket entries.",
        "description" : "A parsed, structured table of the docket entries in the case.",
        "operationId" : "casesGetDocketEntries",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Tokens...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "The database identifier of the case.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DocketEntry"
              }
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/cases/{caseId}/docket_entries",
          "requestParameters" : {
            "integration.request.path.caseId" : "method.request.path.caseId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/cases/{caseId}/parties" : {
      "get" : {
        "tags" : [ "Cases" ],
        "summary" : "A table of parties.",
        "description" : "A parsed, structured table of the listed parties in the case.",
        "operationId" : "casesGetParties",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "The database identifier of the case.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Party"
              }
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/cases/{caseId}/parties",
          "requestParameters" : {
            "integration.request.path.caseId" : "method.request.path.caseId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/documents/{documentId}" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "A single document.",
        "description" : "Get a single document, specified by `documentId` in the path.",
        "operationId" : "documentsGetOne",
        "produces" : [ "application/json", "application/pdf" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "documentId",
          "in" : "path",
          "description" : "The database identifier of the document.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Document"
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/documents/{documentId}",
          "requestParameters" : {
            "integration.request.path.caseId" : "method.request.path.documentId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/matters" : {
      "get" : {
        "tags" : [ "Matters" ],
        "summary" : "A collection of matters.",
        "description" : "Get all matters relevant to the firm.",
        "operationId" : "mattersGetCollection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "courtType",
          "in" : "query",
          "description" : "The court type (district, bankruptcy or appellate.)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "clientMatterNumber",
          "in" : "query",
          "description" : "The client matter number.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number",
          "required" : false,
          "type" : "integer",
          "default" : 1
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number of objects returned per page",
          "required" : false,
          "type" : "integer",
          "default" : 20
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Matter"
              }
            }
          },
          "400" : {
            "description" : "400 response",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "4\\d{2}" : {
              "statusCode" : "400"
            }
          },
          "requestParameters" : {
            "integration.request.querystring.courtType" : "method.request.querystring.courtType",
            "integration.request.querystring.clientMatterNumber" : "method.request.querystring.clientMatterNumber",
            "integration.request.header.Authorization" : "method.request.header.Authorization",
            "integration.request.querystring.page" : "method.request.querystring.page",
            "integration.request.querystring.limit" : "method.request.querystring.limit"
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/matters",
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/matters/{matterId}" : {
      "get" : {
        "tags" : [ "Matters" ],
        "summary" : "A single matter.",
        "description" : "Get a single matter, specified by `matterId` in the path.",
        "operationId" : "mattersGetOne",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "matterId",
          "in" : "path",
          "description" : "The database identifier of the matter.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Matter"
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/matters/{matterId}",
          "requestParameters" : {
            "integration.request.path.matterId" : "method.request.path.matterId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/case_events" : {
      "get" : {
        "tags" : [ "CaseEvents" ],
        "summary" : "A collection of case events.",
        "description" : "Get case events for your organization.",
        "operationId" : "caseEventsGetCollection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "retrieved_since",
          "in" : "query",
          "description" : "Limit results to case events retrieved since the given value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit number of results to the given number.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Start results at the given page.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CaseEvent"
              }
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "4\\d{2}" : {
              "statusCode" : "400"
            }
          },
          "requestParameters" : {
            "integration.request.header.Authorization" : "method.request.header.Authorization",
            "integration.request.querystring.page" : "method.request.querystring.page",
            "integration.request.querystring.limit" : "method.request.querystring.limit"
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/case_events",
          "passThroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/case_events/{caseEventId}" : {
      "get" : {
        "tags" : [ "CaseEvents" ],
        "summary" : "A single case event.",
        "description" : "Get a single case event, specified by `caseEventId` in the path.",
        "operationId" : "caseEventsGetOne",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseEventId",
          "in" : "path",
          "description" : "The database identifier of the case event.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/CaseEvent"
            }
          },
          "404" : {
            "description" : "404: The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "404" : {
              "statusCode" : "404"
            },
            "default" : {
              "statusCode" : "400"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/case_events/{caseEventId}",
          "requestParameters" : {
            "integration.request.path.caseEventId" : "method.request.path.caseEventId",
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      }
    },
    "/session" : {
      "get" : {
        "tags" : [ "Authentication" ],
        "summary" : "Refresh authentication token",
        "description" : "Using a valid auth token, you can use this to refresh it, thus extending the time unti it expires. See POST /session for instructions on the initial authentication.",
        "operationId" : "sessionRefresh",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Session"
            }
          },
          "401" : {
            "description" : "401: Unauthorized, invalid credentials or token.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "401" : {
              "statusCode" : "401"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/sessions/new",
          "requestParameters" : {
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "GET",
          "type" : "http"
        }
      },
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Initial authentication.",
        "description" : "Use this call to generate an authorization token for use in future calls. Provide your PacerPro credentials (email & password) in the User object. You will get a Session object in return.",
        "operationId" : "sessionCreate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "User",
          "description" : "User credentials",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Session"
            }
          },
          "401" : {
            "description" : "401: Unauthorized, invalid credentials or token.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-amazon-apigateway-integration" : {
          "requestTemplates" : {
            "application/json" : "{ \"user\" : $input.body }"
          },
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "401" : {
              "statusCode" : "401"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/accounts/sign_in",
          "passthroughBehavior" : "when_no_templates",
          "httpMethod" : "POST",
          "type" : "http"
        }
      },
      "delete" : {
        "tags" : [ "Authentication" ],
        "summary" : "Revoke all JWT tokens (logout).",
        "description" : "Revoke JWT tokens by spinning a new JTI. All current tokens will no longer work.",
        "operationId" : "sessionDelete",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer {...JSON Web Token...}",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/Empty"
            }
          },
          "401" : {
            "description" : "401: Unauthorized, invalid credentials or token.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "security" : [ {
          "Bearer" : [ ]
        } ],
        "x-amazon-apigateway-integration" : {
          "responses" : {
            "2\\d{2}" : {
              "statusCode" : "200"
            },
            "401" : {
              "statusCode" : "401"
            }
          },
          "uri" : "https://${stageVariables.endpoint}/api/${stageVariables.version}/sessions",
          "requestParameters" : {
            "integration.request.header.Authorization" : "method.request.header.Authorization"
          },
          "passthroughBehavior" : "when_no_match",
          "httpMethod" : "DELETE",
          "type" : "http"
        }
      }
    }
  },
  "securityDefinitions" : {
    "Bearer" : {
      "description" : "JSON Web Token, prefixed with `Bearer`. See https://jwt.io.",
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header",
      "x-apikey-prefix" : "Bearer"
    }
  },
  "definitions" : {
    "Empty" : {
      "type" : "object",
      "title" : "Empty Schema"
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "error" : {
          "type" : "string",
          "description" : "An error message"
        },
        "message" : {
          "type" : "string",
          "description" : "An error message (alias for `error`)"
        },
        "status" : {
          "type" : "integer",
          "description" : "HTTP status code"
        },
        "type" : {
          "type" : "string",
          "description" : "the type of error",
          "enum" : [ "error", "alert", "notice", "warning" ]
        }
      },
      "title" : "Error Schema"
    },
    "Session" : {
      "type" : "object",
      "properties" : {
        "jwtToken" : {
          "type" : "string",
          "description" : "JSON Web Token, see https://jwt.io. Add to the request header. Provided by server."
        },
        "expiresAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO8601 timestamp when the jwtToken expires"
        }
      },
      "title" : "Session",
      "description" : "An object to create or maintain a session."
    },
    "Case" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Database identifier of the object."
        },
        "judge" : {
          "type" : "string",
          "description" : "Initials of the presiding judge."
        },
        "caseNumber" : {
          "type" : "string",
          "description" : "Canonical case number."
        },
        "caseTitle" : {
          "type" : "string",
          "description" : "Canonical case title."
        },
        "natureOfSuit" : {
          "type" : "string",
          "description" : "Judicial Conference designation of the case."
        },
        "docketEntries" : {
          "type" : "integer",
          "description" : "The count of docket entries in the case."
        },
        "activityAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time of last activity in the case. "
        },
        "referral" : {
          "type" : "string",
          "description" : "Referral to a magistrate judge. See [Rule 59](https://www.law.cornell.edu/rules/frcrmp/rule_59)"
        },
        "filedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date filed with the court."
        },
        "lastFiledDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the most recent filing. May be after the closedDate."
        },
        "closedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the case was closed by the court. There may still be activity long after this date."
        },
        "chapter" : {
          "type" : "string",
          "description" : "Bankruptcy only. Refers to the chapter of the Bankruptcy Code."
        },
        "relatedBankruptcyCaseNumber" : {
          "type" : "string",
          "description" : "Case number of related case."
        }
      },
      "title" : "Case",
      "description" : "An object that represents a matter, i.e., a case in federal court."
    },
    "Matter" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Database identifier of the object."
        },
        "caseId" : {
          "type" : "string",
          "description" : "Database identifier of the Case object."
        },
        "clientMatterNumber" : {
          "type" : "string",
          "description" : "Client/matter billing code."
        },
        "judge" : {
          "type" : "string",
          "description" : "Initials of the presiding judge."
        },
        "caseNumber" : {
          "type" : "string",
          "description" : "Canonical case number."
        },
        "caseTitle" : {
          "type" : "string",
          "description" : "Canonical case title."
        },
        "natureOfSuit" : {
          "type" : "string",
          "description" : "Judicial Conference designation of the case."
        },
        "docketEntries" : {
          "type" : "integer",
          "description" : "The count of docket entries in the case."
        },
        "activityAt" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time of last activity in the case. "
        },
        "referral" : {
          "type" : "string",
          "description" : "Referral to a magistrate judge. See [Rule 59](https://www.law.cornell.edu/rules/frcrmp/rule_59)"
        },
        "filedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date filed with the court."
        },
        "lastFiledDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the most recent filing. May be after the closedDate."
        },
        "closedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the case was closed by the court. There may still be activity long after this date."
        },
        "chapter" : {
          "type" : "string",
          "description" : "Bankruptcy only. Refers to the chapter of the Bankruptcy Code."
        },
        "relatedBankruptcyCaseNumber" : {
          "type" : "string",
          "description" : "Case number of related case."
        },
        "parties" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Party"
          }
        }
      },
      "title" : "Matter",
      "description" : "An object that represents a matter, i.e., a case in federal court, joined with client matter identification."
    },
    "DocketEntry" : {
      "type" : "object",
      "properties" : {
        "docketText" : {
          "type" : "string",
          "description" : "The text of the docket entry."
        },
        "filedDate" : {
          "type" : "string",
          "description" : "The date that on which the docket entry was filed."
        },
        "docketEntryNumber" : {
          "type" : "integer",
          "description" : "The docket entry number."
        },
        "documentsCount" : {
          "type" : "integer",
          "description" : "The number of documents in the docket entry."
        },
        "docketReportOrder" : {
          "type" : "integer",
          "description" : "The order of this docket entry in the docket report."
        },
        "documents" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Document"
          }
        }
      }
    },
    "Document" : {
      "type" : "object",
      "properties" : {
        "uri" : {
          "type" : "string",
          "description" : "The URI where the corresponding PDF file is stored."
        }
      }
    },
    "CaseEvent" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Database identifier of the object."
        },
        "retrievedAt" : {
          "type" : "string",
          "description" : "The date and time when this case event was retrieved, in ISO-8601 format."
        },
        "docketText" : {
          "type" : "string",
          "description" : "The text of the corresponding docket entry."
        },
        "filedDate" : {
          "type" : "string",
          "description" : "The date that on which the corresponding docket entry was filed."
        },
        "docketEntryNumber" : {
          "type" : "integer",
          "description" : "The docket entry number."
        },
        "documentsCount" : {
          "type" : "integer",
          "description" : "The number of documents in the docket entry."
        },
        "docketReportOrder" : {
          "type" : "integer",
          "description" : "The order of this docket entry in the docket report."
        }
      }
    },
    "Party" : {
      "type" : "object",
      "properties" : {
        "role" : {
          "type" : "string",
          "description" : "e.g. Defendant, Plaintiff, etc."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the client in this role."
        },
        "attorneys" : {
          "type" : "array",
          "description" : "A list of attorneys representing the client.",
          "items" : {
            "$ref" : "#/definitions/Attorney"
          }
        }
      }
    },
    "Firm" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the firm."
        },
        "firmAddress" : {
          "type" : "string",
          "description" : "Street address of the firm."
        },
        "domain" : {
          "type" : "string",
          "description" : "Internet domain of the firm."
        }
      }
    },
    "Attorney" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the attorney."
        },
        "firmName" : {
          "type" : "string",
          "description" : "The name of the firm where the attorney works. May refer to the attorney if acting as sole practioner."
        },
        "firmAddress" : {
          "type" : "string",
          "description" : "Street/mailing address for the firm."
        },
        "phone" : {
          "type" : "string",
          "format" : "telephone",
          "description" : "Voice telephone number."
        },
        "fax" : {
          "type" : "string",
          "format" : "telephone",
          "description" : "Telephone number for a fax line."
        },
        "email" : {
          "type" : "string",
          "format" : "email",
          "description" : "An email address for the attorney."
        },
        "firmDomain" : {
          "type" : "string",
          "format" : "hostname",
          "description" : "The email domain of the firm. Usually the right-hand side of the email address after the @-sign."
        },
        "terminated" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date that this attorney ended their role in the case."
        },
        "proHacVice" : {
          "type" : "boolean",
          "description" : "Is this attorney appear _pro hac vice_?"
        },
        "leadAttorney" : {
          "type" : "boolean",
          "description" : "Is this attorney designated as a 'Lead Attorney' in the case."
        },
        "proSe" : {
          "type" : "boolean",
          "description" : "Attorney appearing _pro se_."
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "password" ],
      "properties" : {
        "email" : {
          "type" : "string",
          "format" : "email",
          "description" : "A unique e-mail address that identifies the user to PacerPro."
        },
        "password" : {
          "type" : "string",
          "format" : "password"
        }
      },
      "title" : "User"
    }
  },
  "responses" : {
    "Error" : {
      "description" : "4xx: Unexpected error",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "NotFound" : {
      "description" : "404: The specified resource was not found",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "Unauthorized" : {
      "description" : "401: Unauthorized, invalid credentials or token.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  },
  "x-aws-api-id" : "sdx94nst9f"
}
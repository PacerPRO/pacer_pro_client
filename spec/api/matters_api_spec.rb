=begin
#PacerPro

#PacerPro API documentation.

OpenAPI spec version: 0.3.0
Contact: ken@pacerpro.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for PacerProClient::MattersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MattersApi' do
  let(:api_client) { authenticate_for_testing }
  let(:matters) { @instance.matters_get_collection() }

  before do
    # run before each test
    @instance = PacerProClient::MattersApi.new(api_client)
  end

  after do
    # run after each test
  end

  describe 'test an instance of MattersApi' do
    it 'should create an instact of MattersApi' do
      expect(@instance).to be_instance_of(PacerProClient::MattersApi)
    end
  end

  # unit tests for matters_get_collection
  # A collection of matters.
  # Get all matters relevant to the firm.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Bearer {...JSON Web Token...}
  # @return [Array<Matter>]
  describe 'matters_get_collection test' do
    it "should work" do
      expect(@instance.matters_get_collection).to all(be_a(PacerProClient::Matter))
    end
  end

  # unit tests for matters_get_one
  # A single matter.
  # Get a single matter, specified by &#x60;matterId&#x60; in the path.
  # @param matter_id The database identifier of the matter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Bearer {...JSON Web Token...}
  # @return [Matter]
  describe 'matters_get_one test' do
    it "should work" do
      matter = matters.first
      expect(@instance.matters_get_one(matter.id)).to be_instance_of(PacerProClient::Matter)
    end

    it "should raise an error if not found" do
      expect { @instance.matters_get_one('abc') }
        .to raise_error(PacerProClient::ApiError, 'Not Found')
    end
  end

end
